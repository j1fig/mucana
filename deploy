#!/usr/bin/env python3
import json
import os
import string
import subprocess


_TF_VARS_FILENAME="terraform.tfvars.json"
_PROJECTS_DIR='build/Builds'
_POLICIES_DIR='policies'
_POLICY_TEMPLATE='bucket-policy-template.json'
_BUCKET_SUFFIX=".mucana.org"


def camel_to_kebab(name):
    tokens = []
    token_index = 0

    for l in name:
        if l in string.ascii_uppercase:
            tokens.append('')
            token_index += 1
        tokens[token_index-1] += l.lower()
    return '-'.join(tokens)


def gen_bucket_cname_tf_vars(projects):
    buckets = [p + _BUCKET_SUFFIX for p in projects]
    cnames = {p: b for p, b in zip(projects, buckets)}
    with open(_TF_VARS_FILENAME, 'w') as f:
        f.write(json.dumps({"buckets": buckets, "cnames": cnames}))


def gen_bucket_policies(projects):
    buckets = [p + _BUCKET_SUFFIX for p in projects]
    with open(_POLICY_TEMPLATE, 'r') as f:
        template = json.loads(f.read())

    for b in buckets:
        filename = f"{b}.json"
        with open(os.path.join(_POLICIES_DIR, filename), 'w') as f:
            template["Statement"][0]["Resource"][0] = f"arn:aws:s3:::{b}/*"
            f.write(json.dumps(template))


def sync_builds(builds_to_projects):
    for b, p in builds_to_projects.items():
        bucket = f"s3://{p}{_BUCKET_SUFFIX}"
        src = f"{_PROJECTS_DIR}/{b}"
        cmd = [
            "aws",
            "--profile", "personal",
            "--region", "eu-west-1",
            "s3", "sync",
            src, bucket,
        ]
        subprocess.run(cmd)


def run():
    builds = os.listdir(_PROJECTS_DIR)
    builds_to_projects = {b: camel_to_kebab(b) for b in builds}
    projects = builds_to_projects.values()

    gen_bucket_cname_tf_vars(projects)
    gen_bucket_policies(projects)
    # TODO terraform apply?
    sync_builds(builds_to_projects)


if __name__=="__main__":
    run()
